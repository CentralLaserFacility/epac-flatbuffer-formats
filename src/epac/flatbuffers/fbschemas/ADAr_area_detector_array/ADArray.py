# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from .Attribute import Attribute
from typing import Optional

np = import_numpy()


class ADArray(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ADArray()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsADArray(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def ADArrayBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x41\x44\x41\x72", size_prefixed=size_prefixed
        )

    # ADArray
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ADArray
    def SourceName(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ADArray
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ADArray
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # ADArray
    def Dimensions(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # ADArray
    def DimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # ADArray
    def DimensionsLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ADArray
    def DimensionsIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ADArray
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ADArray
    def Data(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1),
            )
        return 0

    # ADArray
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ADArray
    def DataLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ADArray
    def DataIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ADArray
    def Attributes(self, j: int) -> Optional[Attribute]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = Attribute()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ADArray
    def AttributesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ADArray
    def AttributesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0


def ADArrayStart(builder: flatbuffers.Builder):
    builder.StartObject(7)


def Start(builder: flatbuffers.Builder):
    ADArrayStart(builder)


def ADArrayAddSourceName(builder: flatbuffers.Builder, sourceName: int):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceName), 0
    )


def AddSourceName(builder: flatbuffers.Builder, sourceName: int):
    ADArrayAddSourceName(builder, sourceName)


def ADArrayAddId(builder: flatbuffers.Builder, id: int):
    builder.PrependInt32Slot(1, id, 0)


def AddId(builder: flatbuffers.Builder, id: int):
    ADArrayAddId(builder, id)


def ADArrayAddTimestamp(builder: flatbuffers.Builder, timestamp: int):
    builder.PrependUint64Slot(2, timestamp, 0)


def AddTimestamp(builder: flatbuffers.Builder, timestamp: int):
    ADArrayAddTimestamp(builder, timestamp)


def ADArrayAddDimensions(builder: flatbuffers.Builder, dimensions: int):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0
    )


def AddDimensions(builder: flatbuffers.Builder, dimensions: int):
    ADArrayAddDimensions(builder, dimensions)


def ADArrayStartDimensionsVector(builder, numElems: int) -> int:
    return builder.StartVector(8, numElems, 8)


def StartDimensionsVector(builder, numElems: int) -> int:
    return ADArrayStartDimensionsVector(builder, numElems)


def ADArrayAddDataType(builder: flatbuffers.Builder, dataType: int):
    builder.PrependInt8Slot(4, dataType, 0)


def AddDataType(builder: flatbuffers.Builder, dataType: int):
    ADArrayAddDataType(builder, dataType)


def ADArrayAddData(builder: flatbuffers.Builder, data: int):
    builder.PrependUOffsetTRelativeSlot(
        5, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0
    )


def AddData(builder: flatbuffers.Builder, data: int):
    ADArrayAddData(builder, data)


def ADArrayStartDataVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)


def StartDataVector(builder, numElems: int) -> int:
    return ADArrayStartDataVector(builder, numElems)


def ADArrayAddAttributes(builder: flatbuffers.Builder, attributes: int):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0
    )


def AddAttributes(builder: flatbuffers.Builder, attributes: int):
    ADArrayAddAttributes(builder, attributes)


def ADArrayStartAttributesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)


def StartAttributesVector(builder, numElems: int) -> int:
    return ADArrayStartAttributesVector(builder, numElems)


def ADArrayEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()


def End(builder: flatbuffers.Builder) -> int:
    return ADArrayEnd(builder)
